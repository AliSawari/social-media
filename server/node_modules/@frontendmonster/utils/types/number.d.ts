/**
 * return true if given value is numeric.
 * @param {*} x - any value
 * @returns {boolean} - value is a number
 */
export declare const isNumber: (x: any) => boolean;
/**
 * divide two numbers and returns fallback
 * for unexpected output
 * @param {number} dividend - dividend
 * @param {number} divisor - divisor
 * @param {*} [fallback=0] - fallback value when divisor is 0
 * @returns {number | any } if divisor isn't 0 dividend/divisor elsewhere fallback
 */
export declare const safeDivide: (dividend: number, divisor: number, fallback?: any) => any;
/**
 * clamp a number between two values
 * @param {number} value - value to clamp
 * @param {[number, number]} [range=[0, 1]] - clamp range
 * @returns {number} clamped number
 */
export declare const clamp: (value: number, [min, max]?: number[]) => number;
/**
 * returns percentage value of a number from a maximum number
 * @param {number} value - current value
 * @param {number} max - max value
 * @returns {number} cuurent / max * 100 (return 0 on fallback)
 */
export declare const percent: (value: number, max: number) => number;
/**
 * random int number between two value
 * @param {range} [range = { min = 0, max = MAX_SAFE_INTEGER }] - range of random numbers
 * @returns {number} random integer between min and max
 */
export declare const randomInt: ({ min, max }?: {
    min?: number | undefined;
    max?: number | undefined;
}) => number;
/**
 * parse number to integer in radix 10
 * @param {string} num number to parse
 * @returns {number} parsed number
 */
export declare const toInteger: (num: string) => number;
/**
 * Checks if num is between min and max (and including borders).
 * @param {number} num number check
 * @param {[number, number]} [range] - range
 * @returns {boolean} number is between min and max
 */
export declare const isInRange: (num: number, [min, max]: [number, number]) => boolean;
