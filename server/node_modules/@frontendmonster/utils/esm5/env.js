var envs = {
    prod: 'production',
    dev: 'development',
    test: 'test',
};
/**
 * give NODE_ENV value or given fallback value
 * @param {string} [fallback="development"] fallback value if NODE_ENV is not present (default to "development")
 * @returns {string} NODE_ENV || fallback
 */
export var get = function (fallback) {
    if (fallback === void 0) { fallback = envs.dev; }
    return process.env.NODE_ENV || fallback;
};
/**
 * strict check NODE_ENV with given value
 * @param {string} value env string to check
 * @returns {boolean} is given env strict equal to NODE_ENV
 */
export var is = function (value) { return process.env.NODE_ENV === value; };
/**
 * check NODE_ENV starts with given value (case insensitive)
 * @param {string} value env string to check
 * @returns {boolean} is given env starts with equal to NODE_ENV
 */
export function match(value) {
    var _a, _b;
    var env = (_a = get(null)) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase();
    return (_b = env === null || env === void 0 ? void 0 : env.startsWith(value.toLowerCase())) !== null && _b !== void 0 ? _b : false;
}
/**
 * check env matchs 'development'
 * @returns {boolean} true if env matches "development"
 */
export var matchDev = function () { return match(envs.dev); };
/**
 * check env matchs 'production'
 * @returns {boolean} true if env matches "production"
 */
export var matchProd = function () { return match(envs.prod); };
/**
 * check env matchs 'test'
 * @returns {boolean} true if env matches "test"
 */
export var matchTest = function () { return match(envs.test); };
// shortcuts
export var isDev = matchDev();
export var isProd = matchProd();
export var isTest = matchTest();
//# sourceMappingURL=env.js.map