/**
 * converts crlf to lf
 * @param {string} str - value
 * @returns {string} value with lf line ending
 */
export var crlfToLF = function (str) { return str.replace(/\r\n/g, '\n'); };
/**
 * uppercase first letter + lowercase rest
 * @param {string} str - word to become capitalize
 * @returns {string} Capitalzed value
 */
export var toCapitalCase = function (str) { return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase(); };
/**
 * convert kebab-case to camelCase
 * @param {string} str - kebab-case string
 * @returns {string} camelCase representation of string
 */
export var kebabToCamel = function (str) {
    return str
        .split('-')
        .map(function (part, key) { return (key === 0 ? part : toCapitalCase(part)); })
        .join('');
};
/**
 * return initial chars of words
 * @param {string} name - value to get initials from
 * @param {string} [fallback='?'] - return value if opration failed
 * @returns {string} initials chars of a words || fallback
 * @example getInitials('frontend monsters'); //-> FM
 */
export var getInitials = function (name, fallback) {
    if (fallback === void 0) { fallback = '?'; }
    return typeof name === 'string' && name.length > 0
        ? name
            .replace(/\s+/g, ' ')
            .split(' ')
            .slice(0, 2)
            .map(function (v) { return v === null || v === void 0 ? void 0 : v[0].toUpperCase(); })
            .join('')
        : fallback;
};
/**
 * check if value is null, undefined or empty string
 * @param {*} x - any value
 * @returns {boolean} is null | undefined | empty string
 */
export var isNullOrEmpty = function (x) { return x == null || x === ''; };
//# sourceMappingURL=string.js.map