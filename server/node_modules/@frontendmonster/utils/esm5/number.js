var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
/**
 * return true if given value is numeric.
 * @param {*} x - any value
 * @returns {boolean} - value is a number
 */
export var isNumber = function (x) { return typeof x === 'number' && !Number.isNaN(x); };
/**
 * divide two numbers and returns fallback
 * for unexpected output
 * @param {number} dividend - dividend
 * @param {number} divisor - divisor
 * @param {*} [fallback=0] - fallback value when divisor is 0
 * @returns {number | any } if divisor isn't 0 dividend/divisor elsewhere fallback
 */
export var safeDivide = function (dividend, divisor, fallback) {
    if (fallback === void 0) { fallback = 0; }
    return isNumber(dividend / divisor) ? dividend / divisor : fallback;
};
/**
 * clamp a number between two values
 * @param {number} value - value to clamp
 * @param {[number, number]} [range=[0, 1]] - clamp range
 * @returns {number} clamped number
 */
export var clamp = function (value, _a) {
    var _b = __read(_a === void 0 ? [0, 1] : _a, 2), min = _b[0], max = _b[1];
    return Math.max(Math.min(value, max), min);
};
/**
 * returns percentage value of a number from a maximum number
 * @param {number} value - current value
 * @param {number} max - max value
 * @returns {number} cuurent / max * 100 (return 0 on fallback)
 */
export var percent = function (value, max) { return clamp(safeDivide(value, max)) * 100; };
/**
 * random int number between two value
 * @param {range} [range = { min = 0, max = MAX_SAFE_INTEGER }] - range of random numbers
 * @returns {number} random integer between min and max
 */
export var randomInt = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.min, min = _c === void 0 ? 0 : _c, _d = _b.max, max = _d === void 0 ? Number.MAX_SAFE_INTEGER : _d;
    return Math.floor(Math.random() * (max - min)) + min;
};
/**
 * parse number to integer in radix 10
 * @param {string} num number to parse
 * @returns {number} parsed number
 */
export var toInteger = function (num) { return Number.parseInt(num, 10); };
/**
 * Checks if num is between min and max (and including borders).
 * @param {number} num number check
 * @param {[number, number]} [range] - range
 * @returns {boolean} number is between min and max
 */
export var isInRange = function (num, _a) {
    var _b = __read(_a, 2), min = _b[0], max = _b[1];
    return num - min * num - max <= 0;
};
//# sourceMappingURL=number.js.map