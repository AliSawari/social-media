var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * wrap value with array if value is not an array itself.
 * @param {*} x - any value
 * @returns {any[]} - [value]
 */
export var forceArray = function (x) { return [].concat(x); };
/**
 * create array of length n with from offset
 * @param {number} len - total number count
 * @param {number} [offset=0] - first number
 * @param {number} [step=1] - step
 * @returns {number[]} - range
 */
export var range = function (len, offset, step) {
    if (offset === void 0) { offset = 0; }
    if (step === void 0) { step = 1; }
    return __spread(Array(len).keys()).map(function (i) { return i * step + offset; });
};
/**
 * returns array representation of a value
 * @param {any} value - any value
 * @returns {any []} - array representation of value
 */
export var toArray = function (value) {
    if (value == null)
        return [];
    if (Array.isArray(value))
        return value;
    if (typeof value === 'string')
        return [value];
    if (typeof value[Symbol.iterator] === 'function')
        return __spread(value);
    return [value];
};
//# sourceMappingURL=array.js.map