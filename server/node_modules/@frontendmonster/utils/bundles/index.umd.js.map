{"version":3,"file":"index.umd.js","sources":["../../src/array.ts","../../src/function.ts","../../src/number.ts","../../src/package.ts","../../src/string.ts","../../src/env.ts"],"sourcesContent":["/**\n * wrap value with array if value is not an array itself.\n * @param {*} x - any value\n * @returns {any[]} - [value]\n */\nexport const forceArray = (x: any): any[] => [].concat(x);\n\n/**\n * create array of length n with from offset\n * @param {number} len - total number count\n * @param {number} [offset=0] - first number\n * @param {number} [step=1] - step\n * @returns {number[]} - range\n */\nexport const range = (len: number, offset = 0, step = 1): number[] =>\n  [...Array(len).keys()].map(i => i * step + offset);\n\n/**\n * returns array representation of a value\n * @param {any} value - any value\n * @returns {any []} - array representation of value\n */\nexport const toArray = (value: any): any[] => {\n  if (value == null) return [];\n  if (Array.isArray(value)) return value;\n  if (typeof value === 'string') return [value];\n  if (typeof value[Symbol.iterator] === 'function') return [...value];\n  return [value];\n};\n","/**\n * noop ¯\\_(ツ)_/¯\n * @returns {void}\n */\nexport const noop = (): void => undefined;\n\n/**\n * call ginen functions with an args\n * @param {function[]} fns function to call\n * @returns {function} function that takes arguments\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const callAll = (...fns: Function[]) => (...args: any) =>\n  fns.forEach(fn => typeof fn === 'function' && fn(...args));\n","/**\n * return true if given value is numeric.\n * @param {*} x - any value\n * @returns {boolean} - value is a number\n */\nexport const isNumber = (x: any): boolean => typeof x === 'number' && !Number.isNaN(x);\n\n/**\n * divide two numbers and returns fallback\n * for unexpected output\n * @param {number} dividend - dividend\n * @param {number} divisor - divisor\n * @param {*} [fallback=0] - fallback value when divisor is 0\n * @returns {number | any } if divisor isn't 0 dividend/divisor elsewhere fallback\n */\nexport const safeDivide = (dividend: number, divisor: number, fallback: any = 0): any =>\n  isNumber(dividend / divisor) ? dividend / divisor : fallback;\n\n/**\n * clamp a number between two values\n * @param {number} value - value to clamp\n * @param {[number, number]} [range=[0, 1]] - clamp range\n * @returns {number} clamped number\n */\nexport const clamp = (value: number, [min, max]: number[] = [0, 1]): number => Math.max(Math.min(value, max), min);\n\n/**\n * returns percentage value of a number from a maximum number\n * @param {number} value - current value\n * @param {number} max - max value\n * @returns {number} cuurent / max * 100 (return 0 on fallback)\n */\nexport const percent = (value: number, max: number): number => clamp(safeDivide(value, max)) * 100;\n\n/**\n * random int number between two value\n * @param {range} [range = { min = 0, max = MAX_SAFE_INTEGER }] - range of random numbers\n * @returns {number} random integer between min and max\n */\nexport const randomInt = ({ min = 0, max = Number.MAX_SAFE_INTEGER }: { min?: number; max?: number } = {}): number =>\n  Math.floor(Math.random() * (max - min)) + min;\n\n/**\n * parse number to integer in radix 10\n * @param {string} num number to parse\n * @returns {number} parsed number\n */\nexport const toInteger = (num: string): number => Number.parseInt(num, 10);\n\n/**\n * Checks if num is between min and max (and including borders).\n * @param {number} num number check\n * @param {[number, number]} [range] - range\n * @returns {boolean} number is between min and max\n */\nexport const isInRange = (num: number, [min, max]: [number, number]): boolean => num - min * num - max <= 0;\n","type PackageJson = Record<Dependencies, any>;\ntype Dependencies = 'peerDependencies' | 'devDependencies' | 'dependencies' | 'optionalDependencies';\n\nconst hasDepType = (packageJson: PackageJson) => (type: Dependencies) => (dep: string) =>\n  typeof packageJson[type] === 'object' && Reflect.has(packageJson[type], dep);\n\nexport const hasPeerDep = (packageJson: PackageJson) => hasDepType(packageJson)('peerDependencies');\nexport const hasDep = (packageJson: PackageJson) => hasDepType(packageJson)('dependencies');\nexport const hasDevDep = (packageJson: PackageJson) => hasDepType(packageJson)('devDependencies');\nexport const hasOptDep = (packageJson: PackageJson) => hasDepType(packageJson)('optionalDependencies');\n\nexport const hasAnyDep = (packageJson: PackageJson) => (dep: string) =>\n  [hasDep, hasDevDep, hasPeerDep, hasOptDep].some(isDepExist => isDepExist(packageJson)(dep));\n\nexport const ifAnyDep = (packageJson: PackageJson) => (dep: string, t?: Function, f?: Function) =>\n  hasAnyDep(packageJson)(dep) ? t?.() : f?.();\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Packages = (packageJson: PackageJson) => ({\n  hasOptDep: hasOptDep(packageJson),\n  hasPeerDep: hasPeerDep(packageJson),\n  hasDevDep: hasDevDep(packageJson),\n  hasDep: hasDep(packageJson),\n  hasAnyDep: hasAnyDep(packageJson),\n  ifAnyDep: ifAnyDep(packageJson),\n});\n","/**\n * converts crlf to lf\n * @param {string} str - value\n * @returns {string} value with lf line ending\n */\nexport const crlfToLF = (str: string): string => str.replace(/\\r\\n/g, '\\n');\n\n/**\n * uppercase first letter + lowercase rest\n * @param {string} str - word to become capitalize\n * @returns {string} Capitalzed value\n */\nexport const toCapitalCase = (str: string): string => str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();\n\n/**\n * convert kebab-case to camelCase\n * @param {string} str - kebab-case string\n * @returns {string} camelCase representation of string\n */\nexport const kebabToCamel = (str: string): string =>\n  str\n    .split('-')\n    .map((part, key) => (key === 0 ? part : toCapitalCase(part)))\n    .join('');\n\n/**\n * return initial chars of words\n * @param {string} name - value to get initials from\n * @param {string} [fallback='?'] - return value if opration failed\n * @returns {string} initials chars of a words || fallback\n * @example getInitials('frontend monsters'); //-> FM\n */\nexport const getInitials = (name: string, fallback = '?'): string =>\n  typeof name === 'string' && name.length > 0\n    ? name\n        .replace(/\\s+/g, ' ')\n        .split(' ')\n        .slice(0, 2)\n        .map(v => v?.[0].toUpperCase())\n        .join('')\n    : fallback;\n\n/**\n * check if value is null, undefined or empty string\n * @param {*} x - any value\n * @returns {boolean} is null | undefined | empty string\n */\nexport const isNullOrEmpty = (x: any): boolean => x == null || x === '';\n","const envs = {\n  prod: 'production',\n  dev: 'development',\n  test: 'test',\n};\n\n/**\n * give NODE_ENV value or given fallback value\n * @param {string} [fallback=\"development\"] fallback value if NODE_ENV is not present (default to \"development\")\n * @returns {string} NODE_ENV || fallback\n */\nexport const get = <T = string>(fallback: string | T = envs.dev): string | T => process.env.NODE_ENV || fallback;\n\n/**\n * strict check NODE_ENV with given value\n * @param {string} value env string to check\n * @returns {boolean} is given env strict equal to NODE_ENV\n */\nexport const is = (value: string): boolean => process.env.NODE_ENV === value;\n\n/**\n * check NODE_ENV starts with given value (case insensitive)\n * @param {string} value env string to check\n * @returns {boolean} is given env starts with equal to NODE_ENV\n */\nexport function match(value: string): boolean {\n  const env = get(null)?.toLocaleLowerCase();\n  return env?.startsWith(value.toLowerCase()) ?? false;\n}\n\n/**\n * check env matchs 'development'\n * @returns {boolean} true if env matches \"development\"\n */\nexport const matchDev = (): boolean => match(envs.dev);\n\n/**\n * check env matchs 'production'\n * @returns {boolean} true if env matches \"production\"\n */\nexport const matchProd = (): boolean => match(envs.prod);\n\n/**\n * check env matchs 'test'\n * @returns {boolean} true if env matches \"test\"\n */\nexport const matchTest = (): boolean => match(envs.test);\n\n// shortcuts\nexport const isDev = matchDev();\nexport const isProd = matchProd();\nexport const isTest = matchTest();\n"],"names":["__read"],"mappings":"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"}