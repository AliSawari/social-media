const hasDepType = (packageJson) => (type) => (dep) => typeof packageJson[type] === 'object' && Reflect.has(packageJson[type], dep);
export const hasPeerDep = (packageJson) => hasDepType(packageJson)('peerDependencies');
export const hasDep = (packageJson) => hasDepType(packageJson)('dependencies');
export const hasDevDep = (packageJson) => hasDepType(packageJson)('devDependencies');
export const hasOptDep = (packageJson) => hasDepType(packageJson)('optionalDependencies');
export const hasAnyDep = (packageJson) => (dep) => [hasDep, hasDevDep, hasPeerDep, hasOptDep].some(isDepExist => isDepExist(packageJson)(dep));
export const ifAnyDep = (packageJson) => (dep, t, f) => hasAnyDep(packageJson)(dep) ? t === null || t === void 0 ? void 0 : t() : f === null || f === void 0 ? void 0 : f();
// eslint-disable-next-line @typescript-eslint/naming-convention
export const Packages = (packageJson) => ({
    hasOptDep: hasOptDep(packageJson),
    hasPeerDep: hasPeerDep(packageJson),
    hasDevDep: hasDevDep(packageJson),
    hasDep: hasDep(packageJson),
    hasAnyDep: hasAnyDep(packageJson),
    ifAnyDep: ifAnyDep(packageJson),
});
//# sourceMappingURL=package.js.map